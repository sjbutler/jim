/* Java14Parser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Java14Parser.java */
package uk.ac.open.crc.jim.parser.java14;

import java.io.*;

/**
 * Grammar to parse Java version 1.5
 * @author Sreenivasa Viswanadha - Simplified and enhanced for 1.5
 * @author Simon Butler - revised to parse Java 1.4 after a fashion
 *                        The intention is to parse pre 1.5 Java that
 *                        uses the 1.5 keyword enum as an identifier name.
 * Changes made
 *  - commented out enum as a keyword
 *  - commented out EnumDeclaration in TypeDeclaration
 *  - commented out EnumDeclaration, EnumBody and EnumConstant productions
 *  - commented out references to EnumDeclaration in other productions
 */
public class Java14Parser/*@bgen(jjtree)*/implements Java14ParserTreeConstants, Java14ParserConstants {/*@bgen(jjtree)*/
  protected JJTJava14ParserState jjtree = new JJTJava14ParserState();/**
    * Class to hold modifiers.
    */
   static public final class ModifierSet
   {
     /* Definitions of the bits in the modifiers field.  */
     public static final int PUBLIC = 0x0001;
     public static final int PROTECTED = 0x0002;
     public static final int PRIVATE = 0x0004;
     public static final int ABSTRACT = 0x0008;
     public static final int STATIC = 0x0010;
     public static final int FINAL = 0x0020;
     public static final int SYNCHRONIZED = 0x0040;
     public static final int NATIVE = 0x0080;
     public static final int TRANSIENT = 0x0100;
     public static final int VOLATILE = 0x0200;
     public static final int STRICTFP = 0x1000;

     /** A set of accessors that indicate whether the specified modifier
         is in the set. */

     public boolean isPublic(int modifiers)
     {
       return (modifiers & PUBLIC) != 0;
     }

     public boolean isProtected(int modifiers)
     {
       return (modifiers & PROTECTED) != 0;
     }

     public boolean isPrivate(int modifiers)
     {
       return (modifiers & PRIVATE) != 0;
     }

     public boolean isStatic(int modifiers)
     {
       return (modifiers & STATIC) != 0;
     }

     public boolean isAbstract(int modifiers)
     {
       return (modifiers & ABSTRACT) != 0;
     }

     public boolean isFinal(int modifiers)
     {
       return (modifiers & FINAL) != 0;
     }

     public boolean isNative(int modifiers)
     {
       return (modifiers & NATIVE) != 0;
     }

     public boolean isStrictfp(int modifiers)
     {
       return (modifiers & STRICTFP) != 0;
     }

     public boolean isSynchronized(int modifiers)
     {
       return (modifiers & SYNCHRONIZED) != 0;
     }

     public boolean isTransient(int modifiers)
      {
       return (modifiers & TRANSIENT) != 0;
     }

     public boolean isVolatile(int modifiers)
     {
       return (modifiers & VOLATILE) != 0;
     }

     /**
      * Removes the given modifier.
      */
     static int removeModifier(int modifiers, int mod)
     {
        return modifiers & ~mod;
     }
   }

   public Java14Parser(File file)
   {
      this(System.in);
      try {
        ReInit(new FileInputStream(file));
      }
      catch(Exception e) {
        e.printStackTrace();  // need to revise exception handling
      }
   }

   public Java14Parser(String fileName)
   {
      this(System.in);
      try {
        ReInit(new FileInputStream(new File(fileName)));
      }
      catch(Exception e) {
        e.printStackTrace();  // need to revise exception handling 
      }
   }

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */
  final public 
ASTCompilationUnit CompilationUnit() throws ParseException {/*@bgen(jjtree) CompilationUnit */
  ASTCompilationUnit jjtn000 = (ASTCompilationUnit)ASTCompilationUnit.jjtCreate(this, JJTCOMPILATIONUNIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PACKAGE:{
        jj_consume_token(PACKAGE);
        PackageDeclaration();
        break;
        }
      default:
        ;
      }
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          break label_1;
        }
        ImportDeclaration();
      }
      label_2:
      while (true) {
        TypeDeclaration();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case CLASS:
        case FINAL:
        case INTERFACE:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOLATILE:
        case SEMICOLON:{
          ;
          break;
          }
        default:
          break label_2;
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 126:{
        jj_consume_token(126);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STUFF_TO_IGNORE:{
        jj_consume_token(STUFF_TO_IGNORE);
        break;
        }
      default:
        ;
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void PackageDeclaration() throws ParseException {/*@bgen(jjtree) PackageDeclaration */
  ASTPackageDeclaration jjtn000 = (ASTPackageDeclaration)ASTPackageDeclaration.jjtCreate(this, JJTPACKAGEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Modifiers();
      jj_consume_token(PACKAGE);
      Name();
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ImportDeclaration() throws ParseException {/*@bgen(jjtree) ImportDeclaration */
  ASTImportDeclaration jjtn000 = (ASTImportDeclaration)ASTImportDeclaration.jjtCreate(this, JJTIMPORTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IMPORT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
jjtn000.setText("static");
        break;
        }
      default:
        ;
      }
      Name();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        Dot();
        StarWildcard();
        break;
        }
      default:
        ;
      }
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
  final public 
int Modifiers() throws ParseException {/*@bgen(jjtree) Modifiers */
   ASTModifiers jjtn000 = (ASTModifiers)ASTModifiers.jjtCreate(this, JJTMODIFIERS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));int modifiers = 0;
    try {
      label_3:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUBLIC:{
          jj_consume_token(PUBLIC);
modifiers |= ModifierSet.PUBLIC;
          break;
          }
        case STATIC:{
          jj_consume_token(STATIC);
modifiers |= ModifierSet.STATIC;
          break;
          }
        case PROTECTED:{
          jj_consume_token(PROTECTED);
modifiers |= ModifierSet.PROTECTED;
          break;
          }
        case PRIVATE:{
          jj_consume_token(PRIVATE);
modifiers |= ModifierSet.PRIVATE;
          break;
          }
        case FINAL:{
          jj_consume_token(FINAL);
modifiers |= ModifierSet.FINAL;
          break;
          }
        case ABSTRACT:{
          jj_consume_token(ABSTRACT);
modifiers |= ModifierSet.ABSTRACT;
          break;
          }
        case SYNCHRONIZED:{
          jj_consume_token(SYNCHRONIZED);
modifiers |= ModifierSet.SYNCHRONIZED;
          break;
          }
        case NATIVE:{
          jj_consume_token(NATIVE);
modifiers |= ModifierSet.NATIVE;
          break;
          }
        case TRANSIENT:{
          jj_consume_token(TRANSIENT);
modifiers |= ModifierSet.TRANSIENT;
          break;
          }
        case VOLATILE:{
          jj_consume_token(VOLATILE);
modifiers |= ModifierSet.VOLATILE;
          break;
          }
        case STRICTFP:{
          jj_consume_token(STRICTFP);
modifiers |= ModifierSet.STRICTFP;
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
   jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return modifiers;}
    } finally {
if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
     jjtn000.jjtSetLastToken(getToken(0));
   }
    }
    throw new Error("Missing return statement in function");
  }

/*
 * Declaration syntax follows.
 */
  final public void TypeDeclaration() throws ParseException {/*@bgen(jjtree) TypeDeclaration */
   ASTTypeDeclaration jjtn000 = (ASTTypeDeclaration)ASTTypeDeclaration.jjtCreate(this, JJTTYPEDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));int modifiers;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        SemiColon();
        break;
        }
      case ABSTRACT:
      case CLASS:
      case FINAL:
      case INTERFACE:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:{
        modifiers = Modifiers();
        ClassOrInterfaceDeclaration(modifiers);
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ClassOrInterfaceDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) ClassOrInterfaceDeclaration */
   ASTClassOrInterfaceDeclaration jjtn000 = (ASTClassOrInterfaceDeclaration)ASTClassOrInterfaceDeclaration.jjtCreate(this, JJTCLASSORINTERFACEDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));boolean isInterface = false;
   { jjtn000.setModifiers(modifiers); }
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLASS:{
        jj_consume_token(CLASS);
jjtn000.setText("class");
        break;
        }
      case INTERFACE:{
        jj_consume_token(INTERFACE);
isInterface = true;
jjtn000.setText("interface");
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        TypeParameters();
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        ExtendsList(isInterface);
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPLEMENTS:{
        ImplementsList(isInterface);
        break;
        }
      default:
        ;
      }
      ClassOrInterfaceBody(isInterface);
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ExtendsList(boolean isInterface) throws ParseException {/*@bgen(jjtree) ExtendsList */
   ASTExtendsList jjtn000 = (ASTExtendsList)ASTExtendsList.jjtCreate(this, JJTEXTENDSLIST);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));boolean extendsMoreThanOne = false;
    try {
      jj_consume_token(EXTENDS);
      ClassOrInterfaceType();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_4;
        }
        Comma();
        ClassOrInterfaceType();
extendsMoreThanOne = true;
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
if (extendsMoreThanOne && !isInterface)
         {if (true) throw new ParseException("A class cannot extend more than one other class");}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ImplementsList(boolean isInterface) throws ParseException {/*@bgen(jjtree) ImplementsList */
  ASTImplementsList jjtn000 = (ASTImplementsList)ASTImplementsList.jjtCreate(this, JJTIMPLEMENTSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IMPLEMENTS);
      ClassOrInterfaceType();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_5;
        }
        Comma();
        ClassOrInterfaceType();
      }
jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
if (isInterface)
         {if (true) throw new ParseException("An interface cannot implement other interfaces");}
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

/*
void EnumDeclaration(int modifiers):
{}
{
   { jjtThis.setModifiers(modifiers); }
  "enum" Identifier()
  [ ImplementsList(false) ]
  EnumBody()
}

void EnumBody():
{}
{
   LeftBrace()
   [ EnumConstant() ( LOOKAHEAD(2) Comma() EnumConstant() )* ]
    [ Comma() ]
   [ SemiColon() ( ClassOrInterfaceBodyDeclaration(false) )* ]
   RightBrace()
}

void EnumConstant():
{}
{
  Modifiers() Identifier() [ Arguments() ] [ ClassOrInterfaceBody(false) ]
}
*/
  final public 
void TypeParameters() throws ParseException {/*@bgen(jjtree) TypeParameters */
  ASTTypeParameters jjtn000 = (ASTTypeParameters)ASTTypeParameters.jjtCreate(this, JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LeftAngle();
      TypeParameter();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_6;
        }
        Comma();
        TypeParameter();
      }
      RightAngle();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void TypeParameter() throws ParseException {/*@bgen(jjtree) TypeParameter */
  ASTTypeParameter jjtn000 = (ASTTypeParameter)ASTTypeParameter.jjtCreate(this, JJTTYPEPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        TypeBound();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void TypeBound() throws ParseException {/*@bgen(jjtree) TypeBound */
  ASTTypeBound jjtn000 = (ASTTypeBound)ASTTypeBound.jjtCreate(this, JJTTYPEBOUND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXTENDS);
      ClassOrInterfaceType();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_AND:{
          ;
          break;
          }
        default:
          break label_7;
        }
        jj_consume_token(BIT_AND);
        ClassOrInterfaceType();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ClassOrInterfaceBody(boolean isInterface) throws ParseException {/*@bgen(jjtree) ClassOrInterfaceBody */
  ASTClassOrInterfaceBody jjtn000 = (ASTClassOrInterfaceBody)ASTClassOrInterfaceBody.jjtCreate(this, JJTCLASSORINTERFACEBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LeftBrace();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LBRACE:
        case SEMICOLON:
        case LT:{
          ;
          break;
          }
        default:
          break label_8;
        }
        ClassOrInterfaceBodyDeclaration(isInterface);
      }
      RightBrace();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ClassOrInterfaceBodyDeclaration(boolean isInterface) throws ParseException {/*@bgen(jjtree) ClassOrInterfaceBodyDeclaration */
   ASTClassOrInterfaceBodyDeclaration jjtn000 = (ASTClassOrInterfaceBodyDeclaration)ASTClassOrInterfaceBodyDeclaration.jjtCreate(this, JJTCLASSORINTERFACEBODYDECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));boolean isNestedInterface = false;
   int modifiers;
    try {
      if (jj_2_4(2)) {
        Initializer();
jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
if (isInterface)
        {if (true) throw new ParseException("An interface cannot have initializers");}
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case CLASS:
        case DOUBLE:
        case FINAL:
        case FLOAT:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SYNCHRONIZED:
        case TRANSIENT:
        case VOID:
        case VOLATILE:
        case IDENTIFIER:
        case LT:{
          modifiers = Modifiers();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CLASS:
          case INTERFACE:{
            ClassOrInterfaceDeclaration(modifiers);
            break;
            }
          default:
            if (jj_2_2(2147483647)) {
              ConstructorDeclaration(modifiers);
            } else if (jj_2_3(2147483647)) {
              FieldDeclaration(modifiers);
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case BOOLEAN:
              case BYTE:
              case CHAR:
              case DOUBLE:
              case FLOAT:
              case INT:
              case LONG:
              case SHORT:
              case VOID:
              case IDENTIFIER:
              case LT:{
                MethodDeclaration(modifiers);
                break;
                }
              default:
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
          break;
          }
        case SEMICOLON:{
          SemiColon();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void FieldDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) FieldDeclaration */
  ASTFieldDeclaration jjtn000 = (ASTFieldDeclaration)ASTFieldDeclaration.jjtCreate(this, JJTFIELDDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
jjtn000.setModifiers(modifiers);
      Type();
      VariableDeclarator();
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_9;
        }
        Comma();
        VariableDeclarator();
      }
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void VariableDeclarator() throws ParseException {/*@bgen(jjtree) VariableDeclarator */
  ASTVariableDeclarator jjtn000 = (ASTVariableDeclarator)ASTVariableDeclarator.jjtCreate(this, JJTVARIABLEDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      VariableDeclaratorId();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        VariableInitializer();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void VariableDeclaratorId() throws ParseException {/*@bgen(jjtree) VariableDeclaratorId */
  ASTVariableDeclaratorId jjtn000 = (ASTVariableDeclaratorId)ASTVariableDeclaratorId.jjtCreate(this, JJTVARIABLEDECLARATORID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          break label_10;
        }
        LeftSquare();
        RightSquare();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void VariableInitializer() throws ParseException {/*@bgen(jjtree) VariableInitializer */
  ASTVariableInitializer jjtn000 = (ASTVariableInitializer)ASTVariableInitializer.jjtCreate(this, JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        ArrayInitializer();
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        Expression();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ArrayInitializer() throws ParseException {/*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = (ASTArrayInitializer)ASTArrayInitializer.jjtCreate(this, JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LeftBrace();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        VariableInitializer();
        label_11:
        while (true) {
          if (jj_2_5(2)) {
            ;
          } else {
            break label_11;
          }
          Comma();
          VariableInitializer();
        }
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        Comma();
        break;
        }
      default:
        ;
      }
      RightBrace();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void MethodDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) MethodDeclaration */
  ASTMethodDeclaration jjtn000 = (ASTMethodDeclaration)ASTMethodDeclaration.jjtCreate(this, JJTMETHODDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
jjtn000.setModifiers(modifiers);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        TypeParameters();
        break;
        }
      default:
        ;
      }
      ResultType();
      MethodDeclarator();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THROWS:{
        jj_consume_token(THROWS);
        NameList();
jjtn000.setText("throws");
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        Block();
        break;
        }
      case SEMICOLON:{
        SemiColon();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void MethodDeclarator() throws ParseException {/*@bgen(jjtree) MethodDeclarator */
  ASTMethodDeclarator jjtn000 = (ASTMethodDeclarator)ASTMethodDeclarator.jjtCreate(this, JJTMETHODDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      FormalParameters();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          ;
          break;
          }
        default:
          break label_12;
        }
        LeftSquare();
        RightSquare();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void FormalParameters() throws ParseException {/*@bgen(jjtree) FormalParameters */
  ASTFormalParameters jjtn000 = (ASTFormalParameters)ASTFormalParameters.jjtCreate(this, JJTFORMALPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LeftParenthesis();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ABSTRACT:
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FINAL:
      case FLOAT:
      case INT:
      case LONG:
      case NATIVE:
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case SHORT:
      case STATIC:
      case STRICTFP:
      case SYNCHRONIZED:
      case TRANSIENT:
      case VOLATILE:
      case IDENTIFIER:{
        FormalParameter();
        label_13:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            break label_13;
          }
          Comma();
          FormalParameter();
        }
        break;
        }
      default:
        ;
      }
      RightParenthesis();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void FormalParameter() throws ParseException {/*@bgen(jjtree) FormalParameter */
  ASTFormalParameter jjtn000 = (ASTFormalParameter)ASTFormalParameter.jjtCreate(this, JJTFORMALPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Modifiers();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINAL:{
        jj_consume_token(FINAL);
jjtn000.setText("final");
        break;
        }
      default:
        ;
      }
      Type();
      VariableDeclaratorId();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ConstructorDeclaration(int modifiers) throws ParseException {/*@bgen(jjtree) ConstructorDeclaration */
  ASTConstructorDeclaration jjtn000 = (ASTConstructorDeclaration)ASTConstructorDeclaration.jjtCreate(this, JJTCONSTRUCTORDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
jjtn000.setModifiers(modifiers);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        TypeParameters();
        break;
        }
      default:
        ;
      }
      Identifier();
      FormalParameters();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THROWS:{
        jj_consume_token(THROWS);
        NameList();
jjtn000.setText("throws");
        break;
        }
      default:
        ;
      }
      LeftBrace();
      if (jj_2_6(2147483647)) {
        ExplicitConstructorInvocation();
      } else {
        ;
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:{
          ;
          break;
          }
        default:
          break label_14;
        }
        BlockStatement();
      }
      RightBrace();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void ExplicitConstructorInvocation() throws ParseException {/*@bgen(jjtree) ExplicitConstructorInvocation */
  ASTExplicitConstructorInvocation jjtn000 = (ASTExplicitConstructorInvocation)ASTExplicitConstructorInvocation.jjtCreate(this, JJTEXPLICITCONSTRUCTORINVOCATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER:{
          ;
          break;
          }
        default:
          break label_15;
        }
        Identifier();
        Dot();
      }
      if (jj_2_7(2)) {
        jj_consume_token(THIS);
        Dot();
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        TypeArguments();
        break;
        }
      default:
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case THIS:{
        jj_consume_token(THIS);
jjtn000.setText("this");
        break;
        }
      case SUPER:{
        jj_consume_token(SUPER);
jjtn000.setText("super");
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      Arguments();
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Initializer() throws ParseException {/*@bgen(jjtree) Initializer */
  ASTInitializer jjtn000 = (ASTInitializer)ASTInitializer.jjtCreate(this, JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STATIC:{
        jj_consume_token(STATIC);
jjtn000.setText("static");
        break;
        }
      default:
        ;
      }
      Block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/*
 * Type, name and expression syntax follows.
 */
  final public 
void Type() throws ParseException {/*@bgen(jjtree) Type */
  ASTType jjtn000 = (ASTType)ASTType.jjtCreate(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_8(2)) {
        ReferenceType();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FLOAT:
        case INT:
        case LONG:
        case SHORT:{
          PrimitiveType();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ReferenceType() throws ParseException {/*@bgen(jjtree) ReferenceType */
  ASTReferenceType jjtn000 = (ASTReferenceType)ASTReferenceType.jjtCreate(this, JJTREFERENCETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:{
        PrimitiveType();
        label_16:
        while (true) {
          LeftSquare();
          RightSquare();
          if (jj_2_9(2)) {
            ;
          } else {
            break label_16;
          }
        }
        break;
        }
      case IDENTIFIER:{
        ClassOrInterfaceType();
        label_17:
        while (true) {
          if (jj_2_10(2)) {
            ;
          } else {
            break label_17;
          }
          LeftSquare();
          RightSquare();
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ClassOrInterfaceType() throws ParseException {/*@bgen(jjtree) ClassOrInterfaceType */
  ASTClassOrInterfaceType jjtn000 = (ASTClassOrInterfaceType)ASTClassOrInterfaceType.jjtCreate(this, JJTCLASSORINTERFACETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      if (jj_2_11(2)) {
        TypeArguments();
      } else {
        ;
      }
      label_18:
      while (true) {
        if (jj_2_12(2)) {
          ;
        } else {
          break label_18;
        }
        Dot();
        Identifier();
        if (jj_2_13(2)) {
          TypeArguments();
        } else {
          ;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void TypeArguments() throws ParseException {/*@bgen(jjtree) TypeArguments */
  ASTTypeArguments jjtn000 = (ASTTypeArguments)ASTTypeArguments.jjtCreate(this, JJTTYPEARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LeftAngle();
      TypeArgument();
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_19;
        }
        Comma();
        TypeArgument();
      }
      RightAngle();
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void TypeArgument() throws ParseException {/*@bgen(jjtree) TypeArgument */
  ASTTypeArgument jjtn000 = (ASTTypeArgument)ASTTypeArgument.jjtCreate(this, JJTTYPEARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:{
        ReferenceType();
        break;
        }
      case HOOK:{
        jj_consume_token(HOOK);
jjtn000.setText("?");
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EXTENDS:
        case SUPER:{
          WildcardBounds();
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void WildcardBounds() throws ParseException {/*@bgen(jjtree) WildcardBounds */
  ASTWildcardBounds jjtn000 = (ASTWildcardBounds)ASTWildcardBounds.jjtCreate(this, JJTWILDCARDBOUNDS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXTENDS:{
        jj_consume_token(EXTENDS);
        ReferenceType();
jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                               jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("extends");
        break;
        }
      case SUPER:{
        jj_consume_token(SUPER);
        ReferenceType();
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("super");
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

// added setText methods
// for the Hungarian & Halstead visitors to use
  final public void PrimitiveType() throws ParseException {/*@bgen(jjtree) PrimitiveType */
  ASTPrimitiveType jjtn000 = (ASTPrimitiveType)ASTPrimitiveType.jjtCreate(this, JJTPRIMITIVETYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:{
        jj_consume_token(BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("boolean");
        break;
        }
      case CHAR:{
        jj_consume_token(CHAR);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("char");
        break;
        }
      case BYTE:{
        jj_consume_token(BYTE);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("byte");
        break;
        }
      case SHORT:{
        jj_consume_token(SHORT);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("short");
        break;
        }
      case INT:{
        jj_consume_token(INT);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("int");
        break;
        }
      case LONG:{
        jj_consume_token(LONG);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("long");
        break;
        }
      case FLOAT:{
        jj_consume_token(FLOAT);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("float");
        break;
        }
      case DOUBLE:{
        jj_consume_token(DOUBLE);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("double");
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ResultType() throws ParseException {/*@bgen(jjtree) ResultType */
  ASTResultType jjtn000 = (ASTResultType)ASTResultType.jjtCreate(this, JJTRESULTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VOID:{
        jj_consume_token(VOID);
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("void");
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case INT:
      case LONG:
      case SHORT:
      case IDENTIFIER:{
        Type();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Name() throws ParseException {/*@bgen(jjtree) Name */
  ASTName jjtn000 = (ASTName)ASTName.jjtCreate(this, JJTNAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      label_20:
      while (true) {
        if (jj_2_14(2)) {
          ;
        } else {
          break label_20;
        }
        Dot();
        Identifier();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void NameList() throws ParseException {/*@bgen(jjtree) NameList */
  ASTNameList jjtn000 = (ASTNameList)ASTNameList.jjtCreate(this, JJTNAMELIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Name();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_21;
        }
        Comma();
        Name();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/*
 * Expression syntax follows.
 */
  final public 
void Expression() throws ParseException {/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = (ASTExpression)ASTExpression.jjtCreate(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ConditionalExpression();
      if (jj_2_15(2)) {
        AssignmentOperator();
        Expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

// added setText for the Halstead visitor
  final public void AssignmentOperator() throws ParseException {/*@bgen(jjtree) AssignmentOperator */
  ASTAssignmentOperator jjtn000 = (ASTAssignmentOperator)ASTAssignmentOperator.jjtCreate(this, JJTASSIGNMENTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("=");
        break;
        }
      case STARASSIGN:{
        jj_consume_token(STARASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("*=");
        break;
        }
      case SLASHASSIGN:{
        jj_consume_token(SLASHASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("/=");
        break;
        }
      case REMASSIGN:{
        jj_consume_token(REMASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("%=");
        break;
        }
      case PLUSASSIGN:{
        jj_consume_token(PLUSASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("+=");
        break;
        }
      case MINUSASSIGN:{
        jj_consume_token(MINUSASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("-=");
        break;
        }
      case LSHIFTASSIGN:{
        jj_consume_token(LSHIFTASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("<<=");
        break;
        }
      case RSIGNEDSHIFTASSIGN:{
        jj_consume_token(RSIGNEDSHIFTASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(">>=");
        break;
        }
      case RUNSIGNEDSHIFTASSIGN:{
        jj_consume_token(RUNSIGNEDSHIFTASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(">>>=");
        break;
        }
      case ANDASSIGN:{
        jj_consume_token(ANDASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("&=");
        break;
        }
      case XORASSIGN:{
        jj_consume_token(XORASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("^=");
        break;
        }
      case ORASSIGN:{
        jj_consume_token(ORASSIGN);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("|=");
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ConditionalExpression() throws ParseException {/*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = (ASTConditionalExpression)ASTConditionalExpression.jjtCreate(this, JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ConditionalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HOOK:{
        jj_consume_token(HOOK);
        Expression();
        jj_consume_token(COLON);
        Expression();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ConditionalOrExpression() throws ParseException {/*@bgen(jjtree) ConditionalOrExpression */
  ASTConditionalOrExpression jjtn000 = (ASTConditionalOrExpression)ASTConditionalOrExpression.jjtCreate(this, JJTCONDITIONALOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ConditionalAndExpression();
      label_22:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_OR:{
          ;
          break;
          }
        default:
          break label_22;
        }
        jj_consume_token(SC_OR);
        ConditionalAndExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ConditionalAndExpression() throws ParseException {/*@bgen(jjtree) ConditionalAndExpression */
  ASTConditionalAndExpression jjtn000 = (ASTConditionalAndExpression)ASTConditionalAndExpression.jjtCreate(this, JJTCONDITIONALANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      InclusiveOrExpression();
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_AND:{
          ;
          break;
          }
        default:
          break label_23;
        }
        jj_consume_token(SC_AND);
        InclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void InclusiveOrExpression() throws ParseException {/*@bgen(jjtree) InclusiveOrExpression */
  ASTInclusiveOrExpression jjtn000 = (ASTInclusiveOrExpression)ASTInclusiveOrExpression.jjtCreate(this, JJTINCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ExclusiveOrExpression();
      label_24:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_OR:{
          ;
          break;
          }
        default:
          break label_24;
        }
        jj_consume_token(BIT_OR);
        ExclusiveOrExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ExclusiveOrExpression() throws ParseException {/*@bgen(jjtree) ExclusiveOrExpression */
  ASTExclusiveOrExpression jjtn000 = (ASTExclusiveOrExpression)ASTExclusiveOrExpression.jjtCreate(this, JJTEXCLUSIVEOREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      AndExpression();
      label_25:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case XOR:{
          ;
          break;
          }
        default:
          break label_25;
        }
        jj_consume_token(XOR);
        AndExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void AndExpression() throws ParseException {/*@bgen(jjtree) AndExpression */
  ASTAndExpression jjtn000 = (ASTAndExpression)ASTAndExpression.jjtCreate(this, JJTANDEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      EqualityExpression();
      label_26:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_AND:{
          ;
          break;
          }
        default:
          break label_26;
        }
        jj_consume_token(BIT_AND);
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void EqualityExpression() throws ParseException {/*@bgen(jjtree) EqualityExpression */
  ASTEqualityExpression jjtn000 = (ASTEqualityExpression)ASTEqualityExpression.jjtCreate(this, JJTEQUALITYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      InstanceOfExpression();
      label_27:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NE:{
          ;
          break;
          }
        default:
          break label_27;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:{
          jj_consume_token(EQ);
jjtn000.setText("==");
          break;
          }
        case NE:{
          jj_consume_token(NE);
jjtn000.setText("!=");
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        InstanceOfExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void InstanceOfExpression() throws ParseException {/*@bgen(jjtree) InstanceOfExpression */
  ASTInstanceOfExpression jjtn000 = (ASTInstanceOfExpression)ASTInstanceOfExpression.jjtCreate(this, JJTINSTANCEOFEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      RelationalExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSTANCEOF:{
        jj_consume_token(INSTANCEOF);
        Type();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void RelationalExpression() throws ParseException {/*@bgen(jjtree) RelationalExpression */
  ASTRelationalExpression jjtn000 = (ASTRelationalExpression)ASTRelationalExpression.jjtCreate(this, JJTRELATIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ShiftExpression();
      label_28:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:
        case LE:
        case GE:
        case GT:{
          ;
          break;
          }
        default:
          break label_28;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:{
          jj_consume_token(LT);
jjtn000.setText("<");
          break;
          }
        case GT:{
          jj_consume_token(GT);
jjtn000.setText(">");
          break;
          }
        case LE:{
          jj_consume_token(LE);
jjtn000.setText("<=");
          break;
          }
        case GE:{
          jj_consume_token(GE);
jjtn000.setText(">=");
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ShiftExpression() throws ParseException {/*@bgen(jjtree) ShiftExpression */
  ASTShiftExpression jjtn000 = (ASTShiftExpression)ASTShiftExpression.jjtCreate(this, JJTSHIFTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      AdditiveExpression();
      label_29:
      while (true) {
        if (jj_2_16(1)) {
          ;
        } else {
          break label_29;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSHIFT:{
          jj_consume_token(LSHIFT);
jjtn000.setText("<<");
          break;
          }
        default:
          if (jj_2_17(1)) {
            RSIGNEDSHIFT();
          } else if (jj_2_18(1)) {
            RUNSIGNEDSHIFT();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        AdditiveExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void AdditiveExpression() throws ParseException {/*@bgen(jjtree) AdditiveExpression */
  ASTAdditiveExpression jjtn000 = (ASTAdditiveExpression)ASTAdditiveExpression.jjtCreate(this, JJTADDITIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      MultiplicativeExpression();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          break label_30;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
jjtn000.setText("+");
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
jjtn000.setText("-");
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {/*@bgen(jjtree) MultiplicativeExpression */
  ASTMultiplicativeExpression jjtn000 = (ASTMultiplicativeExpression)ASTMultiplicativeExpression.jjtCreate(this, JJTMULTIPLICATIVEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      UnaryExpression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case SLASH:
        case REM:{
          ;
          break;
          }
        default:
          break label_31;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:{
          jj_consume_token(STAR);
jjtn000.setText("*");
          break;
          }
        case SLASH:{
          jj_consume_token(SLASH);
jjtn000.setText("/");
          break;
          }
        case REM:{
          jj_consume_token(REM);
jjtn000.setText("%");
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void UnaryExpression() throws ParseException {/*@bgen(jjtree) UnaryExpression */
  ASTUnaryExpression jjtn000 = (ASTUnaryExpression)ASTUnaryExpression.jjtCreate(this, JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:
      case MINUS:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
jjtn000.setText("+");
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
jjtn000.setText("-");
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
        }
      case INCR:{
        PreIncrementExpression();
        break;
        }
      case DECR:{
        PreDecrementExpression();
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:{
        UnaryExpressionNotPlusMinus();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PreIncrementExpression() throws ParseException {/*@bgen(jjtree) PreIncrementExpression */
  ASTPreIncrementExpression jjtn000 = (ASTPreIncrementExpression)ASTPreIncrementExpression.jjtCreate(this, JJTPREINCREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INCR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PreDecrementExpression() throws ParseException {/*@bgen(jjtree) PreDecrementExpression */
  ASTPreDecrementExpression jjtn000 = (ASTPreDecrementExpression)ASTPreDecrementExpression.jjtCreate(this, JJTPREDECREMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DECR);
      PrimaryExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void UnaryExpressionNotPlusMinus() throws ParseException {/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  ASTUnaryExpressionNotPlusMinus jjtn000 = (ASTUnaryExpressionNotPlusMinus)ASTUnaryExpressionNotPlusMinus.jjtCreate(this, JJTUNARYEXPRESSIONNOTPLUSMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BANG:
      case TILDE:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case TILDE:{
          jj_consume_token(TILDE);
jjtn000.setText("~");
          break;
          }
        case BANG:{
          jj_consume_token(BANG);
jjtn000.setText("!");
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        UnaryExpression();
        break;
        }
      default:
        if (jj_2_19(2147483647)) {
          CastExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:{
            PostfixExpression();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
  final public void CastLookahead() throws ParseException {/*@bgen(jjtree) CastLookahead */
  ASTCastLookahead jjtn000 = (ASTCastLookahead)ASTCastLookahead.jjtCreate(this, JJTCASTLOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_20(2)) {
        LeftParenthesis();
        PrimitiveType();
      } else if (jj_2_21(2147483647)) {
        LeftParenthesis();
        Type();
        LeftSquare();
        RightSquare();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          LeftParenthesis();
          Type();
          RightParenthesis();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case TILDE:{
            jj_consume_token(TILDE);
            break;
            }
          case BANG:{
            jj_consume_token(BANG);
            break;
            }
          case LPAREN:{
            jj_consume_token(LPAREN);
            break;
            }
          case IDENTIFIER:{
            Identifier();
            break;
            }
          case THIS:{
            jj_consume_token(THIS);
            break;
            }
          case SUPER:{
            jj_consume_token(SUPER);
            break;
            }
          case NEW:{
            jj_consume_token(NEW);
            break;
            }
          case FALSE:
          case NULL:
          case TRUE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:{
            Literal();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PostfixExpression() throws ParseException {/*@bgen(jjtree) PostfixExpression */
  ASTPostfixExpression jjtn000 = (ASTPostfixExpression)ASTPostfixExpression.jjtCreate(this, JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      PrimaryExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:
      case DECR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INCR:{
          jj_consume_token(INCR);
jjtn000.setText("++");
          break;
          }
        case DECR:{
          jj_consume_token(DECR);
jjtn000.setText("--");
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void CastExpression() throws ParseException {/*@bgen(jjtree) CastExpression */
  ASTCastExpression jjtn000 = (ASTCastExpression)ASTCastExpression.jjtCreate(this, JJTCASTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_22(2147483647)) {
        LeftParenthesis();
        Type();
        RightParenthesis();
        UnaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          LeftParenthesis();
          Type();
          RightParenthesis();
          UnaryExpressionNotPlusMinus();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PrimaryExpression() throws ParseException {/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = (ASTPrimaryExpression)ASTPrimaryExpression.jjtCreate(this, JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      PrimaryPrefix();
      label_32:
      while (true) {
        if (jj_2_23(2)) {
          ;
        } else {
          break label_32;
        }
        PrimarySuffix();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void MemberSelector() throws ParseException {/*@bgen(jjtree) MemberSelector */
  ASTMemberSelector jjtn000 = (ASTMemberSelector)ASTMemberSelector.jjtCreate(this, JJTMEMBERSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Dot();
      TypeArguments();
      Identifier();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PrimaryPrefix() throws ParseException {/*@bgen(jjtree) PrimaryPrefix */
  ASTPrimaryPrefix jjtn000 = (ASTPrimaryPrefix)ASTPrimaryPrefix.jjtCreate(this, JJTPRIMARYPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FALSE:
      case NULL:
      case TRUE:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:{
        Literal();
        break;
        }
      default:
        if (jj_2_24(2147483647)) {
          label_33:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IDENTIFIER:{
              ;
              break;
              }
            default:
              break label_33;
            }
            Identifier();
            Dot();
          }
          jj_consume_token(THIS);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("this");
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SUPER:{
            jj_consume_token(SUPER);
            Dot();
            Identifier();
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("super");
            break;
            }
          default:
            if (jj_2_25(2147483647)) {
              ClassOrInterfaceType();
              Dot();
              jj_consume_token(SUPER);
              Dot();
              Identifier();
jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("super");
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case LPAREN:{
                LeftParenthesis();
                Expression();
                RightParenthesis();
                break;
                }
              case NEW:{
                AllocationExpression();
                break;
                }
              default:
                if (jj_2_26(2147483647)) {
                  ResultType();
                  Dot();
                  jj_consume_token(CLASS);
jjtree.closeNodeScope(jjtn000, true);
                                jjtc000 = false;
                                jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("class");
                } else {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case IDENTIFIER:{
                    Name();
                    break;
                    }
                  default:
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void PrimarySuffix() throws ParseException {/*@bgen(jjtree) PrimarySuffix */
  ASTPrimarySuffix jjtn000 = (ASTPrimarySuffix)ASTPrimarySuffix.jjtCreate(this, JJTPRIMARYSUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_27(2147483647)) {
        Dot();
        jj_consume_token(SUPER);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("super");
      } else if (jj_2_28(2147483647)) {
        Dot();
        jj_consume_token(THIS);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("this");
      } else if (jj_2_29(2)) {
        Dot();
        AllocationExpression();
      } else if (jj_2_30(3)) {
        MemberSelector();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          LeftSquare();
          Expression();
          RightSquare();
          break;
          }
        case DOT:{
          Dot();
          Identifier();
          break;
          }
        case LPAREN:{
          Arguments();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Literal() throws ParseException {/*@bgen(jjtree) Literal */
  ASTLiteral jjtn000 = (ASTLiteral)ASTLiteral.jjtCreate(this, JJTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER_LITERAL:{
        IntegerLiteral();
        break;
        }
      case FLOATING_POINT_LITERAL:{
        FloatingPointLiteral();
        break;
        }
      case CHARACTER_LITERAL:{
        CharacterLiteral();
        break;
        }
      case STRING_LITERAL:{
        StringLiteral();
        break;
        }
      case FALSE:
      case TRUE:{
        BooleanLiteral();
        break;
        }
      case NULL:{
        NullLiteral();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void StringLiteral() throws ParseException {/*@bgen(jjtree) StringLiteral */
  ASTStringLiteral jjtn000 = (ASTStringLiteral)ASTStringLiteral.jjtCreate(this, JJTSTRINGLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(t.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void CharacterLiteral() throws ParseException {/*@bgen(jjtree) CharacterLiteral */
  ASTCharacterLiteral jjtn000 = (ASTCharacterLiteral)ASTCharacterLiteral.jjtCreate(this, JJTCHARACTERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(CHARACTER_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(t.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void FloatingPointLiteral() throws ParseException {/*@bgen(jjtree) FloatingPointLiteral */
  ASTFloatingPointLiteral jjtn000 = (ASTFloatingPointLiteral)ASTFloatingPointLiteral.jjtCreate(this, JJTFLOATINGPOINTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(FLOATING_POINT_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(t.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void IntegerLiteral() throws ParseException {/*@bgen(jjtree) IntegerLiteral */
  ASTIntegerLiteral jjtn000 = (ASTIntegerLiteral)ASTIntegerLiteral.jjtCreate(this, JJTINTEGERLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(INTEGER_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(t.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void BooleanLiteral() throws ParseException {/*@bgen(jjtree) BooleanLiteral */
  ASTBooleanLiteral jjtn000 = (ASTBooleanLiteral)ASTBooleanLiteral.jjtCreate(this, JJTBOOLEANLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TRUE:{
        jj_consume_token(TRUE);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("true");
        break;
        }
      case FALSE:{
        jj_consume_token(FALSE);
jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
               jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("false");
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void NullLiteral() throws ParseException {/*@bgen(jjtree) NullLiteral */
  ASTNullLiteral jjtn000 = (ASTNullLiteral)ASTNullLiteral.jjtCreate(this, JJTNULLLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(NULL);
jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
              jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("null");
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Arguments() throws ParseException {/*@bgen(jjtree) Arguments */
  ASTArguments jjtn000 = (ASTArguments)ASTArguments.jjtCreate(this, JJTARGUMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LeftParenthesis();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        ArgumentList();
        break;
        }
      default:
        ;
      }
      RightParenthesis();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ArgumentList() throws ParseException {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = (ASTArgumentList)ASTArgumentList.jjtCreate(this, JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_34;
        }
        Comma();
        Expression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void AllocationExpression() throws ParseException {/*@bgen(jjtree) AllocationExpression */
  ASTAllocationExpression jjtn000 = (ASTAllocationExpression)ASTAllocationExpression.jjtCreate(this, JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_31(2)) {
        jj_consume_token(NEW);
        PrimitiveType();
        ArrayDimsAndInits();
jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText("new");
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:{
          jj_consume_token(NEW);
          ClassOrInterfaceType();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LT:{
            TypeArguments();
            break;
            }
          default:
            ;
          }
jjtn000.setText("new");
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LBRACKET:{
            ArrayDimsAndInits();
            break;
            }
          case LPAREN:{
            Arguments();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LBRACE:{
              ClassOrInterfaceBody(false);
              break;
              }
            default:
              ;
            }
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
  final public void ArrayDimsAndInits() throws ParseException {/*@bgen(jjtree) ArrayDimsAndInits */
  ASTArrayDimsAndInits jjtn000 = (ASTArrayDimsAndInits)ASTArrayDimsAndInits.jjtCreate(this, JJTARRAYDIMSANDINITS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_34(2)) {
        label_35:
        while (true) {
          LeftSquare();
          Expression();
          RightSquare();
          if (jj_2_32(2)) {
            ;
          } else {
            break label_35;
          }
        }
        label_36:
        while (true) {
          if (jj_2_33(2)) {
            ;
          } else {
            break label_36;
          }
          LeftSquare();
          RightSquare();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          label_37:
          while (true) {
            LeftSquare();
            RightSquare();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case LBRACKET:{
              ;
              break;
              }
            default:
              break label_37;
            }
          }
          ArrayInitializer();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/*
 * Statement syntax follows.
 */
  final public 
void Statement() throws ParseException {/*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = (ASTStatement)ASTStatement.jjtCreate(this, JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_35(2)) {
        LabeledStatement();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSERT:{
          AssertStatement();
          break;
          }
        case LBRACE:{
          Block();
          break;
          }
        case SEMICOLON:{
          EmptyStatement();
          break;
          }
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:{
          StatementExpression();
          SemiColon();
          break;
          }
        case SWITCH:{
          SwitchStatement();
          break;
          }
        case IF:{
          IfStatement();
          break;
          }
        case WHILE:{
          WhileStatement();
          break;
          }
        case DO:{
          DoStatement();
          break;
          }
        case FOR:{
          ForStatement();
          break;
          }
        case BREAK:{
          BreakStatement();
          break;
          }
        case CONTINUE:{
          ContinueStatement();
          break;
          }
        case RETURN:{
          ReturnStatement();
          break;
          }
        case THROW:{
          ThrowStatement();
          break;
          }
        case SYNCHRONIZED:{
          SynchronizedStatement();
          break;
          }
        case TRY:{
          TryStatement();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void AssertStatement() throws ParseException {/*@bgen(jjtree) AssertStatement */
  ASTAssertStatement jjtn000 = (ASTAssertStatement)ASTAssertStatement.jjtCreate(this, JJTASSERTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ASSERT);
      Expression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        Colon();
        Expression();
        break;
        }
      default:
        ;
      }
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void LabeledStatement() throws ParseException {/*@bgen(jjtree) LabeledStatement */
  ASTLabeledStatement jjtn000 = (ASTLabeledStatement)ASTLabeledStatement.jjtCreate(this, JJTLABELEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      Colon();
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Block() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = (ASTBlock)ASTBlock.jjtCreate(this, JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LeftBrace();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CLASS:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case INTERFACE:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case RETURN:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRANSIENT:
        case TRUE:
        case TRY:
        case VOID:
        case VOLATILE:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:{
          ;
          break;
          }
        default:
          break label_38;
        }
        BlockStatement();
      }
      RightBrace();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void BlockStatement() throws ParseException {/*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = (ASTBlockStatement)ASTBlockStatement.jjtCreate(this, JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_36(2147483647)) {
        LocalVariableDeclaration();
        SemiColon();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSERT:
        case BOOLEAN:
        case BREAK:
        case BYTE:
        case CHAR:
        case CONTINUE:
        case DO:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case FOR:
        case IF:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case RETURN:
        case SHORT:
        case SUPER:
        case SWITCH:
        case SYNCHRONIZED:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case VOID:
        case WHILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case LBRACE:
        case SEMICOLON:
        case INCR:
        case DECR:{
          Statement();
          break;
          }
        case CLASS:
        case INTERFACE:{
          ClassOrInterfaceDeclaration(0);
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void LocalVariableDeclaration() throws ParseException {/*@bgen(jjtree) LocalVariableDeclaration */
  ASTLocalVariableDeclaration jjtn000 = (ASTLocalVariableDeclaration)ASTLocalVariableDeclaration.jjtCreate(this, JJTLOCALVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Modifiers();
      Type();
      VariableDeclarator();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_39;
        }
        Comma();
        VariableDeclarator();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void EmptyStatement() throws ParseException {/*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = (ASTEmptyStatement)ASTEmptyStatement.jjtCreate(this, JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void StatementExpression() throws ParseException {/*@bgen(jjtree) StatementExpression */
  ASTStatementExpression jjtn000 = (ASTStatementExpression)ASTStatementExpression.jjtCreate(this, JJTSTATEMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:{
        PreIncrementExpression();
        break;
        }
      case DECR:{
        PreDecrementExpression();
        break;
        }
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:{
        PrimaryExpression();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASSIGN:
        case INCR:
        case DECR:
        case PLUSASSIGN:
        case MINUSASSIGN:
        case STARASSIGN:
        case SLASHASSIGN:
        case ANDASSIGN:
        case ORASSIGN:
        case XORASSIGN:
        case REMASSIGN:
        case LSHIFTASSIGN:
        case RSIGNEDSHIFTASSIGN:
        case RUNSIGNEDSHIFTASSIGN:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INCR:{
            jj_consume_token(INCR);
jjtn000.setText("++");
            break;
            }
          case DECR:{
            jj_consume_token(DECR);
jjtn000.setText("--");
            break;
            }
          case ASSIGN:
          case PLUSASSIGN:
          case MINUSASSIGN:
          case STARASSIGN:
          case SLASHASSIGN:
          case ANDASSIGN:
          case ORASSIGN:
          case XORASSIGN:
          case REMASSIGN:
          case LSHIFTASSIGN:
          case RSIGNEDSHIFTASSIGN:
          case RUNSIGNEDSHIFTASSIGN:{
            AssignmentOperator();
            Expression();
            break;
            }
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          ;
        }
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SwitchStatement() throws ParseException {/*@bgen(jjtree) SwitchStatement */
  ASTSwitchStatement jjtn000 = (ASTSwitchStatement)ASTSwitchStatement.jjtCreate(this, JJTSWITCHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SWITCH);
      LeftParenthesis();
      Expression();
      RightParenthesis();
      LeftBrace();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:
        case _DEFAULT:{
          ;
          break;
          }
        default:
          break label_40;
        }
        SwitchLabel();
        label_41:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABSTRACT:
          case ASSERT:
          case BOOLEAN:
          case BREAK:
          case BYTE:
          case CHAR:
          case CLASS:
          case CONTINUE:
          case DO:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case FOR:
          case IF:
          case INT:
          case INTERFACE:
          case LONG:
          case NATIVE:
          case NEW:
          case NULL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case RETURN:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SUPER:
          case SWITCH:
          case SYNCHRONIZED:
          case THIS:
          case THROW:
          case TRANSIENT:
          case TRUE:
          case TRY:
          case VOID:
          case VOLATILE:
          case WHILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case LBRACE:
          case SEMICOLON:
          case INCR:
          case DECR:{
            ;
            break;
            }
          default:
            break label_41;
          }
          BlockStatement();
        }
      }
      RightBrace();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SwitchLabel() throws ParseException {/*@bgen(jjtree) SwitchLabel */
  ASTSwitchLabel jjtn000 = (ASTSwitchLabel)ASTSwitchLabel.jjtCreate(this, JJTSWITCHLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        CaseLabel();
        break;
        }
      case _DEFAULT:{
        DefaultLabel();
        break;
        }
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void CaseLabel() throws ParseException {/*@bgen(jjtree) CaseLabel */
  ASTCaseLabel jjtn000 = (ASTCaseLabel)ASTCaseLabel.jjtCreate(this, JJTCASELABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CASE);
      Expression();
      Colon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void DefaultLabel() throws ParseException {/*@bgen(jjtree) DefaultLabel */
  ASTDefaultLabel jjtn000 = (ASTDefaultLabel)ASTDefaultLabel.jjtCreate(this, JJTDEFAULTLABEL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(_DEFAULT);
      Colon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
  ASTIfStatement jjtn000 = (ASTIfStatement)ASTIfStatement.jjtCreate(this, JJTIFSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(IF);
      LeftParenthesis();
      Expression();
      RightParenthesis();
      Statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
jjtn000.setText("else");
        Statement();
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
  ASTWhileStatement jjtn000 = (ASTWhileStatement)ASTWhileStatement.jjtCreate(this, JJTWHILESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WHILE);
      LeftParenthesis();
      Expression();
      RightParenthesis();
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void DoStatement() throws ParseException {/*@bgen(jjtree) DoStatement */
  ASTDoStatement jjtn000 = (ASTDoStatement)ASTDoStatement.jjtCreate(this, JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DO);
      Statement();
      jj_consume_token(WHILE);
      LeftParenthesis();
      Expression();
      RightParenthesis();
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ForStatement() throws ParseException {/*@bgen(jjtree) ForStatement */
  ASTForStatement jjtn000 = (ASTForStatement)ASTForStatement.jjtCreate(this, JJTFORSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FOR);
      LeftParenthesis();
      if (jj_2_37(2147483647)) {
        Modifiers();
        Type();
        Identifier();
        Colon();
        Expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ABSTRACT:
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FINAL:
        case FLOAT:
        case INT:
        case LONG:
        case NATIVE:
        case NEW:
        case NULL:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case SHORT:
        case STATIC:
        case STRICTFP:
        case SUPER:
        case SYNCHRONIZED:
        case THIS:
        case TRANSIENT:
        case TRUE:
        case VOID:
        case VOLATILE:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case SEMICOLON:
        case INCR:
        case DECR:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case ABSTRACT:
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FINAL:
          case FLOAT:
          case INT:
          case LONG:
          case NATIVE:
          case NEW:
          case NULL:
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
          case SHORT:
          case STATIC:
          case STRICTFP:
          case SUPER:
          case SYNCHRONIZED:
          case THIS:
          case TRANSIENT:
          case TRUE:
          case VOID:
          case VOLATILE:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case INCR:
          case DECR:{
            ForInit();
            break;
            }
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case BANG:
          case TILDE:
          case INCR:
          case DECR:
          case PLUS:
          case MINUS:{
            Expression();
            break;
            }
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BOOLEAN:
          case BYTE:
          case CHAR:
          case DOUBLE:
          case FALSE:
          case FLOAT:
          case INT:
          case LONG:
          case NEW:
          case NULL:
          case SHORT:
          case SUPER:
          case THIS:
          case TRUE:
          case VOID:
          case INTEGER_LITERAL:
          case FLOATING_POINT_LITERAL:
          case CHARACTER_LITERAL:
          case STRING_LITERAL:
          case IDENTIFIER:
          case LPAREN:
          case INCR:
          case DECR:{
            ForUpdate();
            break;
            }
          default:
            ;
          }
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      RightParenthesis();
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ForInit() throws ParseException {/*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = (ASTForInit)ASTForInit.jjtCreate(this, JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_38(2147483647)) {
        LocalVariableDeclaration();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BOOLEAN:
        case BYTE:
        case CHAR:
        case DOUBLE:
        case FALSE:
        case FLOAT:
        case INT:
        case LONG:
        case NEW:
        case NULL:
        case SHORT:
        case SUPER:
        case THIS:
        case TRUE:
        case VOID:
        case INTEGER_LITERAL:
        case FLOATING_POINT_LITERAL:
        case CHARACTER_LITERAL:
        case STRING_LITERAL:
        case IDENTIFIER:
        case LPAREN:
        case INCR:
        case DECR:{
          StatementExpressionList();
          break;
          }
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void StatementExpressionList() throws ParseException {/*@bgen(jjtree) StatementExpressionList */
  ASTStatementExpressionList jjtn000 = (ASTStatementExpressionList)ASTStatementExpressionList.jjtCreate(this, JJTSTATEMENTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      StatementExpression();
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          break label_42;
        }
        Comma();
        StatementExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ForUpdate() throws ParseException {/*@bgen(jjtree) ForUpdate */
  ASTForUpdate jjtn000 = (ASTForUpdate)ASTForUpdate.jjtCreate(this, JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      StatementExpressionList();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void BreakStatement() throws ParseException {/*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = (ASTBreakStatement)ASTBreakStatement.jjtCreate(this, JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(BREAK);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        Identifier();
        break;
        }
      default:
        ;
      }
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ContinueStatement() throws ParseException {/*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = (ASTContinueStatement)ASTContinueStatement.jjtCreate(this, JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CONTINUE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        Identifier();
        break;
        }
      default:
        ;
      }
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ReturnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = (ASTReturnStatement)ASTReturnStatement.jjtCreate(this, JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOLEAN:
      case BYTE:
      case CHAR:
      case DOUBLE:
      case FALSE:
      case FLOAT:
      case INT:
      case LONG:
      case NEW:
      case NULL:
      case SHORT:
      case SUPER:
      case THIS:
      case TRUE:
      case VOID:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
      case BANG:
      case TILDE:
      case INCR:
      case DECR:
      case PLUS:
      case MINUS:{
        Expression();
        break;
        }
      default:
        ;
      }
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ThrowStatement() throws ParseException {/*@bgen(jjtree) ThrowStatement */
  ASTThrowStatement jjtn000 = (ASTThrowStatement)ASTThrowStatement.jjtCreate(this, JJTTHROWSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(THROW);
      Expression();
      SemiColon();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SynchronizedStatement() throws ParseException {/*@bgen(jjtree) SynchronizedStatement */
  ASTSynchronizedStatement jjtn000 = (ASTSynchronizedStatement)ASTSynchronizedStatement.jjtCreate(this, JJTSYNCHRONIZEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SYNCHRONIZED);
      LeftParenthesis();
      Expression();
      RightParenthesis();
      Block();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void TryStatement() throws ParseException {/*@bgen(jjtree) TryStatement */
  ASTTryStatement jjtn000 = (ASTTryStatement)ASTTryStatement.jjtCreate(this, JJTTRYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRY);
      Block();
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CATCH:{
          ;
          break;
          }
        default:
          break label_43;
        }
        CatchClause();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINALLY:{
        jj_consume_token(FINALLY);
        Block();
jjtn000.setText("finally");
        break;
        }
      default:
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void CatchClause() throws ParseException {/*@bgen(jjtree) CatchClause */
  ASTCatchClause jjtn000 = (ASTCatchClause)ASTCatchClause.jjtCreate(this, JJTCATCHCLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CATCH);
      LeftParenthesis();
      FormalParameter();
      RightParenthesis();
      Block();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/* NB - no need to separate out finally for the moment as
 * it is executed whatever, so doesn't count as a
 * separate path
 */


/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
  final public 
void RUNSIGNEDSHIFT() throws ParseException {/*@bgen(jjtree) RUNSIGNEDSHIFT */
  ASTRUNSIGNEDSHIFT jjtn000 = (ASTRUNSIGNEDSHIFT)ASTRUNSIGNEDSHIFT.jjtCreate(this, JJTRUNSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (getToken(1).kind == GT &&
                      ((MyToken)getToken(1)).realKind == RUNSIGNEDSHIFT) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(GT);
      jj_consume_token(GT);
      jj_consume_token(GT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void RSIGNEDSHIFT() throws ParseException {/*@bgen(jjtree) RSIGNEDSHIFT */
  ASTRSIGNEDSHIFT jjtn000 = (ASTRSIGNEDSHIFT)ASTRSIGNEDSHIFT.jjtCreate(this, JJTRSIGNEDSHIFT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (getToken(1).kind == GT &&
                      ((MyToken)getToken(1)).realKind == RSIGNEDSHIFT) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(GT);
      jj_consume_token(GT);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/* Annotation syntax follows. */
/* all references to annotations removed from upstream productions
 * so these should all be ignored.
 */
//void Annotation():
//{}
//{
//   LOOKAHEAD( "@" Name() "(" ( Identifier() "=" | ")" ))
//   NormalAnnotation()
// |
//   LOOKAHEAD( "@" Name() "(" )
//   SingleMemberAnnotation()
// |
//   MarkerAnnotation()
//}
//
//void NormalAnnotation():
//{}
//{
//   AtSign() Name() LeftParenthesis() [ MemberValuePairs() ] RightParenthesis()
//}
//
//void MarkerAnnotation():
//{}
//{
//  AtSign() Name()
//}

//void SingleMemberAnnotation():
//{}
//{
//  AtSign() Name() LeftParenthesis() MemberValue() RightParenthesis()
//}

//void MemberValuePairs():
//{}
//{
//   MemberValuePair() ( Comma() MemberValuePair() )*
//}

//void MemberValuePair():
//{}
//{
//    Identifier() Assignment() MemberValue()
//    
//}

//void MemberValue():
//{}
//{
//   Annotation()
// |
//   MemberValueArrayInitializer()
// |
//   ConditionalExpression()
//}

//void  MemberValueArrayInitializer():
//{}
//{
//  LeftBrace() (MemberValue() ( LOOKAHEAD(2) Comma() MemberValue() )* [ Comma() ])? RightBrace()
//}


/* Annotation Types. */

//void AnnotationTypeDeclaration(int modifiers):
//{}
//{
//  AtSign() "interface" Identifier() AnnotationTypeBody()
//  
//}

//void AnnotationTypeBody():
//{}
//{
//  LeftBrace() ( AnnotationTypeMemberDeclaration() )* RightBrace()
//}

//void AnnotationTypeMemberDeclaration():
//{
//   int modifiers;
//}
//{
// modifiers = Modifiers()
// (
//   LOOKAHEAD(Type() Identifier() "(")
//   Type() Identifier() LeftParenthesis() RightParenthesis() [ DefaultValue() ] SemiColon()  
//  |
//   ClassOrInterfaceDeclaration(modifiers)
//  |
//   EnumDeclaration(modifiers)*/
//  |
//   AnnotationTypeDeclaration(modifiers)
//  |
//   FieldDeclaration(modifiers)
// )
// |
//   ( SemiColon() )
//}
//
//void DefaultValue():
//{}
//{
//  "default" MemberValue()
//}
//

/* end of annotation syntax */
  final public 
void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
  ASTIdentifier jjtn000 = (ASTIdentifier)ASTIdentifier.jjtCreate(this, JJTIDENTIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setText(t.image);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void LeftParenthesis() throws ParseException {/*@bgen(jjtree) LeftParenthesis */
  ASTLeftParenthesis jjtn000 = (ASTLeftParenthesis)ASTLeftParenthesis.jjtCreate(this, JJTLEFTPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void RightParenthesis() throws ParseException {/*@bgen(jjtree) RightParenthesis */
  ASTRightParenthesis jjtn000 = (ASTRightParenthesis)ASTRightParenthesis.jjtCreate(this, JJTRIGHTPARENTHESIS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RPAREN);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void LeftBrace() throws ParseException {/*@bgen(jjtree) LeftBrace */
  ASTLeftBrace jjtn000 = (ASTLeftBrace)ASTLeftBrace.jjtCreate(this, JJTLEFTBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void RightBrace() throws ParseException {/*@bgen(jjtree) RightBrace */
  ASTRightBrace jjtn000 = (ASTRightBrace)ASTRightBrace.jjtCreate(this, JJTRIGHTBRACE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RBRACE);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void LeftAngle() throws ParseException {/*@bgen(jjtree) LeftAngle */
  ASTLeftAngle jjtn000 = (ASTLeftAngle)ASTLeftAngle.jjtCreate(this, JJTLEFTANGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LT);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void RightAngle() throws ParseException {/*@bgen(jjtree) RightAngle */
  ASTRightAngle jjtn000 = (ASTRightAngle)ASTRightAngle.jjtCreate(this, JJTRIGHTANGLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(GT);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void LeftSquare() throws ParseException {/*@bgen(jjtree) LeftSquare */
  ASTLeftSquare jjtn000 = (ASTLeftSquare)ASTLeftSquare.jjtCreate(this, JJTLEFTSQUARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACKET);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void RightSquare() throws ParseException {/*@bgen(jjtree) RightSquare */
  ASTRightSquare jjtn000 = (ASTRightSquare)ASTRightSquare.jjtCreate(this, JJTRIGHTSQUARE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RBRACKET);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void SemiColon() throws ParseException {/*@bgen(jjtree) SemiColon */
  ASTSemiColon jjtn000 = (ASTSemiColon)ASTSemiColon.jjtCreate(this, JJTSEMICOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void Colon() throws ParseException {/*@bgen(jjtree) Colon */
  ASTColon jjtn000 = (ASTColon)ASTColon.jjtCreate(this, JJTCOLON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Assignment() throws ParseException {/*@bgen(jjtree) Assignment */
  ASTAssignment jjtn000 = (ASTAssignment)ASTAssignment.jjtCreate(this, JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ASSIGN);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Comma() throws ParseException {/*@bgen(jjtree) Comma */
  ASTComma jjtn000 = (ASTComma)ASTComma.jjtCreate(this, JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COMMA);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void Dot() throws ParseException {/*@bgen(jjtree) Dot */
  ASTDot jjtn000 = (ASTDot)ASTDot.jjtCreate(this, JJTDOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(DOT);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void AtSign() throws ParseException {/*@bgen(jjtree) AtSign */
  ASTAtSign jjtn000 = (ASTAtSign)ASTAtSign.jjtCreate(this, JJTATSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(AT);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void StarWildcard() throws ParseException {/*@bgen(jjtree) StarWildcard */
  ASTStarWildcard jjtn000 = (ASTStarWildcard)ASTStarWildcard.jjtCreate(this, JJTSTARWILDCARD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STAR);
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_3R_149()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_200()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(ORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(XORASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_114()
 {
    if (jj_scan_token(ANDASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(RUNSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(RSIGNEDSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(LSHIFTASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(MINUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(PLUSASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(REMASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(SLASHASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(STARASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) {
    jj_scanpos = xsp;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) {
    jj_scanpos = xsp;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) {
    jj_scanpos = xsp;
    if (jj_3R_115()) {
    jj_scanpos = xsp;
    if (jj_3R_116()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_71()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_15()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_331()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_323()
 {
    if (jj_3R_246()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_331()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_66()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(LBRACE)) return true;
    return false;
  }

  private boolean jj_3R_246()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(VOID)) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_135()) {
    jj_scanpos = xsp;
    if (jj_3R_136()) return true;
    }
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(FLOAT)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    if (jj_scan_token(LONG)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(SHORT)) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(BYTE)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(CHAR)) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_122()) {
    jj_scanpos = xsp;
    if (jj_3R_123()) {
    jj_scanpos = xsp;
    if (jj_3R_124()) {
    jj_scanpos = xsp;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_219()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_199()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    return false;
  }

  private boolean jj_3R_218()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    if (jj_scan_token(HOOK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_103()) return true;
    if (jj_3R_104()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_154()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_66()) return true;
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_293()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_12()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_10()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_78()) return true;
    Token xsp;
    if (jj_3_9()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_scan_token(THIS)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_310()
 {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    return false;
  }

  private boolean jj_3R_330()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_329()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_3R_56()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_96()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    if (jj_3R_100()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_326()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_312()
 {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_311()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_333()
 {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_322()
 {
    if (jj_3R_329()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_330()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_308()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_302()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    if (jj_3R_309()) return true;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    xsp = jj_scanpos;
    if (jj_3R_311()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_312()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    return false;
  }

  private boolean jj_3R_317()
 {
    if (jj_scan_token(THROWS)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_329()
 {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_333()) jj_scanpos = xsp;
    if (jj_3R_57()) return true;
    if (jj_3R_324()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    return false;
  }

  private boolean jj_3R_319()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_309()
 {
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_322()) jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((MyToken)getToken(1)).realKind == RSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_118()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_316()
 {
    if (jj_3R_56()) return true;
    if (jj_3R_309()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_326()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_292()
 {
    if (jj_3R_64()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_318()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == GT &&
                ((MyToken)getToken(1)).realKind == RUNSIGNEDSHIFT;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_119()) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_315()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_304()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_315()) jj_scanpos = xsp;
    if (jj_3R_82()) return true;
    if (jj_3R_316()) return true;
    xsp = jj_scanpos;
    if (jj_3R_317()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    }
    return false;
  }

  private boolean jj_3R_325()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_314()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_332()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_3R_141()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_292()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_351()
 {
    if (jj_scan_token(CATCH)) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_329()) return true;
    if (jj_3R_146()) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    }
    return false;
  }

  private boolean jj_3R_344()
 {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_343()
 {
    if (jj_3R_351()) return true;
    return false;
  }

  private boolean jj_3R_324()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_332()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_217()
 {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_93()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_343()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_344()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_313()
 {
    if (jj_3R_324()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_57()) return true;
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_58()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_216()
 {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_146()) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_342()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_303()
 {
    if (jj_3R_57()) return true;
    if (jj_3R_313()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_314()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3R_341()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_301()
 {
    if (jj_3R_304()) return true;
    return false;
  }

  private boolean jj_3R_215()
 {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_297()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_337()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_300()
 {
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_350()
 {
    if (jj_3R_358()) return true;
    return false;
  }

  private boolean jj_3R_364()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_299()
 {
    if (jj_3R_302()) return true;
    return false;
  }

  private boolean jj_3R_214()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_340()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_298()
 {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_213()
 {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_296()
 {
    if (jj_3R_86()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_298()) {
    jj_scanpos = xsp;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_3R_301()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_212()
 {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_340()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_294()
 {
    if (jj_3R_295()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_358()
 {
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3R_295()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_349()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_86()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3R_363()
 {
    if (jj_3R_206()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_364()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_291()
 {
    if (jj_3R_141()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_294()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_362()
 {
    if (jj_3R_363()) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_86()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_56()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_170()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_361()
 {
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3R_357()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) return true;
    }
    return false;
  }

  private boolean jj_3R_348()
 {
    if (jj_3R_357()) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_339()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_348()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_349()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_350()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_338()
 {
    if (jj_3R_86()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_56()) return true;
    if (jj_3R_87()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_103()) return true;
    if (jj_3R_138()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_139()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3R_211()
 {
    if (jj_scan_token(FOR)) return true;
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3R_339()) return true;
    }
    if (jj_3R_146()) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_210()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_172()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_146()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_209()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_146()) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_scan_token(INTERFACE)) return true;
    return false;
  }

  private boolean jj_3R_208()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_146()) return true;
    if (jj_3R_172()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_360()
 {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_328()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_347()
 {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_321()
 {
    if (jj_scan_token(IMPLEMENTS)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_328()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_359()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_327()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_356()
 {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_355()
 {
    if (jj_3R_359()) return true;
    return false;
  }

  private boolean jj_3R_346()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    return false;
  }

  private boolean jj_3R_334()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_313()) return true;
    return false;
  }

  private boolean jj_3R_320()
 {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_327()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_336()
 {
    if (jj_3R_346()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_347()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_307()
 {
    if (jj_3R_321()) return true;
    return false;
  }

  private boolean jj_3R_207()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_3R_77()) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_146()) return true;
    if (jj_3R_141()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_336()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_306()
 {
    if (jj_3R_320()) return true;
    return false;
  }

  private boolean jj_3R_305()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_197()
 {
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_354()
 {
    if (jj_3R_71()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    if (jj_3R_56()) return true;
    xsp = jj_scanpos;
    if (jj_3R_305()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) jj_scanpos = xsp;
    if (jj_3R_291()) return true;
    return false;
  }

  private boolean jj_3R_353()
 {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_352()
 {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_345()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_224()
 {
    if (jj_3R_229()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_345()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_223()
 {
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_206()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_222()
 {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_205()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_86()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_171()
 {
    if (jj_3R_86()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_313()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(STRICTFP)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3R_335()
 {
    if (jj_3R_87()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(TRANSIENT)) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(NATIVE)) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(SYNCHRONIZED)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_3R_171()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(ABSTRACT)) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(FINAL)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(PRIVATE)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_141()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_142()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_scan_token(PROTECTED)) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(STATIC)) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(PUBLIC)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_3R_56()) return true;
    if (jj_3R_87()) return true;
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_1()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_204()
 {
    if (jj_scan_token(ASSERT)) return true;
    if (jj_3R_72()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_193()
 {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_192()
 {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3R_191()
 {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    if (jj_3R_206()) return true;
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_285()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) {
    jj_scanpos = xsp;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) {
    jj_scanpos = xsp;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_289()
 {
    if (jj_3R_291()) return true;
    return false;
  }

  private boolean jj_3R_290()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_288()
 {
    Token xsp;
    if (jj_3R_290()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_290()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    Token xsp;
    if (jj_3_32()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_32()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_284()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    }
    return false;
  }

  private boolean jj_3R_287()
 {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_3R_63()) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_286()
 {
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_285()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) return true;
    }
    return false;
  }

  private boolean jj_3R_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_78()) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_3R_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_162()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_3R_77()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) jj_scanpos = xsp;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(NULL)) return true;
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    return false;
  }

  private boolean jj_3R_202()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_scan_token(FLOATING_POINT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    if (jj_3R_66()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_66()) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_3R_68()) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_66()) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_66()) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_3R_66()) return true;
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_82()) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_283()
 {
    if (jj_scan_token(DECR)) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_3R_66()) return true;
    if (jj_scan_token(SUPER)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_81()) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_242()
 {
    if (jj_3R_246()) return true;
    return false;
  }

  private boolean jj_3R_241()
 {
    if (jj_3R_82()) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  private boolean jj_3R_240()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_56()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_239()
 {
    if (jj_3R_77()) return true;
    if (jj_3R_72()) return true;
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_80()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_238()
 {
    if (jj_3R_81()) return true;
    if (jj_3R_66()) return true;
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_237()
 {
    if (jj_scan_token(SUPER)) return true;
    if (jj_3R_66()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_245()
 {
    if (jj_3R_56()) return true;
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_236()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_245()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_232()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3R_239()) {
    jj_scanpos = xsp;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_235()
 {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_278()
 {
    if (jj_scan_token(REM)) return true;
    return false;
  }

  private boolean jj_3R_281()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_282()) {
    jj_scanpos = xsp;
    if (jj_3R_283()) return true;
    }
    return false;
  }

  private boolean jj_3R_282()
 {
    if (jj_scan_token(INCR)) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_3R_66()) return true;
    if (jj_3R_70()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_229()
 {
    if (jj_3R_232()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_280()
 {
    if (jj_3R_77()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_146()) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_273()
 {
    if (jj_scan_token(BANG)) return true;
    return false;
  }

  private boolean jj_3R_274()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) return true;
    }
    return false;
  }

  private boolean jj_3R_279()
 {
    if (jj_3R_77()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_146()) return true;
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_271()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_275()
 {
    if (jj_3R_229()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_281()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_277()
 {
    if (jj_scan_token(SLASH)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_3R_77()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_146()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_3R_77()) return true;
    if (jj_3R_57()) return true;
    if (jj_3R_68()) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_77()) return true;
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_263()
 {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  private boolean jj_3R_268()
 {
    if (jj_3R_275()) return true;
    return false;
  }

  private boolean jj_3R_267()
 {
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3R_272()
 {
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_264()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_266()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_272()) {
    jj_scanpos = xsp;
    if (jj_3R_273()) return true;
    }
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_251()
 {
    if (jj_scan_token(NE)) return true;
    return false;
  }

  private boolean jj_3R_270()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_228()
 {
    if (jj_scan_token(DECR)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_265()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    if (jj_3R_248()) return true;
    return false;
  }

  private boolean jj_3R_276()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_269()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) {
    jj_scanpos = xsp;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) return true;
    }
    }
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_227()
 {
    if (jj_scan_token(INCR)) return true;
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(LSHIFT)) return true;
    return false;
  }

  private boolean jj_3R_257()
 {
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    }
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_256()
 {
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_255()
 {
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_262()
 {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  private boolean jj_3R_252()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_254()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) return true;
    }
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_248()
 {
    if (jj_3R_252()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_269()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_249()
 {
    if (jj_scan_token(INSTANCEOF)) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_244()
 {
    if (jj_3R_248()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_265()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_250()
 {
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  private boolean jj_3R_247()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_234()
 {
    if (jj_3R_244()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_261()
 {
    if (jj_scan_token(GE)) return true;
    return false;
  }

  private boolean jj_3R_260()
 {
    if (jj_scan_token(LE)) return true;
    return false;
  }

  private boolean jj_3R_259()
 {
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3R_243()
 {
    if (jj_scan_token(BIT_AND)) return true;
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_258()
 {
    if (jj_scan_token(LT)) return true;
    return false;
  }

  private boolean jj_3R_253()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) return true;
    }
    }
    }
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_231()
 {
    if (jj_3R_234()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_253()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_230()
 {
    if (jj_scan_token(BIT_OR)) return true;
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_226()
 {
    if (jj_3R_231()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_233()
 {
    if (jj_scan_token(XOR)) return true;
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3R_225()
 {
    if (jj_scan_token(SC_AND)) return true;
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_221()
 {
    if (jj_3R_226()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_247()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_220()
 {
    if (jj_scan_token(SC_OR)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_201()
 {
    if (jj_3R_221()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_243()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_200()
 {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_72()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_3R_201()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_233()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_3R_175()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_230()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_156()
 {
    if (jj_3R_163()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_225()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    if (jj_3R_156()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_220()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public Java14ParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public Java14Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Java14Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Java14ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor. */
  public Java14Parser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new Java14ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public Java14Parser(Java14ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
  }

  /** Reinitialise. */
  public void ReInit(Java14ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      return token;
    }
    token = oldToken;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
