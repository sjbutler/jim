/* Generated By:JJTree: Do not edit this line. SimpleNode.java Version 4.3 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=true,VISITOR=true,TRACK_TOKENS=true,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=*,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package uk.ac.open.crc.jim.parser.java15;

public
class SimpleNode implements Node {

  protected Node parent;
  protected Node[] children;
  protected int id;
  protected Object value;
  protected Java15Parser parser;
  protected String text;
  protected int modifiers;
  protected Token firstToken;
  protected Token lastToken;

  public SimpleNode(int i) {
    id = i;
    this.modifiers = 0; // initialise to be safe.
  }

  public SimpleNode(Java15Parser p, int i) {
    this(i);
    parser = p;
  }

  public static Node jjtCreate(int id) {
    return new SimpleNode(id);
  }

  public static Node jjtCreate(Java15Parser p, int id) {
    return new SimpleNode(p, id);
  }

  @Override
  public void jjtOpen() {
  }

  @Override
  public void jjtClose() {
  }


  @Override
  public int getId() {
      return this.id;
  }
  
  // ------------- introduced methods
  public void setText( String text ) {
      this.text = text;
  }

  public String getText() {
      return this.text;
  }

  public void setModifiers(int modifiers) {
      this.modifiers = modifiers;
  }

  public int getModifiers() {
      return this.modifiers;
  }

  // ------------- introduced methods


  @Override
  public void jjtSetParent(Node n) { parent = n; }
  @Override
  public Node jjtGetParent() { return parent; }

  @Override
  public void jjtAddChild(Node n, int i) {
    if (children == null) {
      children = new Node[i + 1];
    } else if (i >= children.length) {
      Node c[] = new Node[i + 1];
      System.arraycopy(children, 0, c, 0, children.length);
      children = c;
    }
    children[i] = n;
  }

  @Override
  public Node jjtGetChild(int i) {
    return children[i];
  }

  @Override
  public int jjtGetNumChildren() {
    return (children == null) ? 0 : children.length;
  }

  public void jjtSetValue(Object value) { this.value = value; }
  public Object jjtGetValue() { return value; }

  public Token jjtGetFirstToken() { return firstToken; }
  public void jjtSetFirstToken(Token token) { this.firstToken = token; }
  public Token jjtGetLastToken() { return lastToken; }
  public void jjtSetLastToken(Token token) { this.lastToken = token; }

  /** Accept the visitor. **/
  @Override
  public Object jjtAccept(Java15ParserVisitor visitor, Object data)
{
    return visitor.visit(this, data);
  }

  /** Accept the visitor. **/
  public Object childrenAccept(Java15ParserVisitor visitor, Object data)
{
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        children[i].jjtAccept(visitor, data);
      }
    }
    return data;
  }

  /* You can override these two methods in subclasses of SimpleNode to
     customize the way the node appears when the tree is dumped.  If
     your output uses more than one line you should override
     toString(String), otherwise overriding toString() is probably all
     you need to do. */

  @Override
  public String toString() { return Java15ParserTreeConstants.jjtNodeName[id]; }
  public String toString(String prefix) { return prefix + toString(); }

  /* Override this method if you want to customize how the node dumps
     out its children. */

  public void dump(String prefix) {
    System.out.println(toString(prefix));
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        SimpleNode n = (SimpleNode)children[i];
        if (n != null) {
          n.dump(prefix + " ");
        }
      }
    }
  }
}

/* JavaCC - OriginalChecksum=298d3a307ea0a1c6e5dba61aabd7a78e (do not edit this line) */
